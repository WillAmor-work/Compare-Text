use EMEABB
go

set concat_null_yields_null off
go
 
IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Conv_Log_ActionDetail')
  DROP TABLE dbo.Conv_Log_ActionDetail
GO

CREATE TABLE dbo.Conv_Log_ActionDetail (
  ID            int            IDENTITY,
  Source        nvarchar (254) NULL,
  ScriptName    nvarchar (254) NULL,
  ProcedureName nvarchar (254) NULL,
  SectionDesc   nvarchar (254) NULL,
  Message       nvarchar (254) NULL,
  TargetTable   nvarchar (254) NULL,
  StartTime     datetime       NULL,
  EndTime       datetime       NULL,
  RowsAffected  bigint         NULL,
  Error         int            NULL
)
GO

IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.ROUTINES WHERE ROUTINE_NAME = 'cpass_conv_Log_Start')
  DROP PROCEDURE dbo.cpass_conv_Log_Start
GO

CREATE PROCEDURE dbo.cpass_conv_Log_Start @Source        nvarchar (254),
                                              @ScriptName    nvarchar (254),
                                              @ProcedureName nvarchar (254),
                                              @SectionDesc   nvarchar (254),
                                              @Message       nvarchar (254),
                                              @TargetTable   nvarchar (254),
                                              @PrintMessage  tinyint = 0,
                                              @LogID         int = NULL OUTPUT AS
/******************************************************************************
 Copyright: 2018 - CPA Software Solutions Ltd.

 Description: 

 Use: 

 Modification History:

******************************************************************************/
BEGIN
  SET NOCOUNT ON

  DECLARE @Error       int

  INSERT INTO dbo.Conv_Log_ActionDetail (Source, ScriptName, ProcedureName,  SectionDesc,  Message,  TargetTable, StartTime)
  VALUES   (@Source, @ScriptName, @ProcedureName, @SectionDesc, @Message, @TargetTable, GETDATE ())

  SET @Error = @@ERROR

  SET @LogID = SCOPE_IDENTITY ()

  RETURN @Error

END -- procedure cpass_conv_Log_Start
GO

IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.ROUTINES WHERE ROUTINE_NAME = 'cpass_conv_Log_End')
  DROP PROCEDURE dbo.cpass_conv_Log_End
GO

CREATE PROCEDURE dbo.cpass_conv_Log_End @LogID        int,
                                            @RowsAffected bigint,
                                            @InputError   int,
                                            @PrintMessage tinyint = 0 AS
/******************************************************************************
 Copyright: 2018 - CPA Software Solutions Ltd.

 Description: 
 
 Modification History:

******************************************************************************/
BEGIN
  SET NOCOUNT ON

  DECLARE @Error       int

  UPDATE dbo.Conv_Log_ActionDetail
  SET EndTime      = GETDATE (),
      RowsAffected = @RowsAffected,
      Error        = @InputError
  WHERE  ID = @LogID

  SET @Error = @@ERROR

  RETURN @Error

END -- procedure cpass_conv_Log_End
GO

--DPH Is this related to converted dates action?

--IF EXISTS (select * from sysobjects where type = 'U' and NAME = 'Conv_IMPORTLEGACYCASEEVENT')
--  DROP TABLE dbo.Conv_IMPORTLEGACYCASEEVENT
--GO

--CREATE TABLE dbo.Conv_IMPORTLEGACYCASEEVENT (
--			IRN					nvarchar (30)  NOT NULL,
--			EVENTNO				integer        NULL, 
--			EVENTCODE			nvarchar  (10) NULL,
--			EVENTDESCRIPTION	nvarchar (100) NULL,
--			EVENTDATE			datetime       NULL,
--			EVENTDUEDATE		datetime       NULL,
--			CYCLE				integer        NULL, 
--			OCCURREDFLAG		decimal (1, 0) NULL, 
--			EVENTTEXT			nvarchar (254) NULL
--)
--GO

--IF EXISTS (select * from sysobjects where type = 'U' and NAME =  'Conv_IMPORTLEGACYEVENTWITHNO')
--  DROP TABLE dbo.Conv_IMPORTLEGACYEVENTWITHNO
--GO

--CREATE TABLE dbo.Conv_IMPORTLEGACYEVENTWITHNO (
--			  EVENTNO          integer  IDENTITY (-102000000, -1),
--			  EVENTCODE        nvarchar  (10) NULL,
--			  EVENTDESCRIPTION nvarchar (100) NULL
--)
--GO

/*

if exists(SELECT	*
			FROM	INFORMATION_SCHEMA.ROUTINES
			where	ROUTINE_NAME = 'Conv_fn_RemoveNoiseCharacters'
			and		ROUTINE_TYPE = 'FUNCTION')
	drop function Conv_fn_RemoveNoiseCharacters
go

CREATE  FUNCTION [dbo].Conv_fn_RemoveNoiseCharacters
       (
            @psName nvarchar(1000) -- character string between 2 goods
       )
Returns nvarchar(1000)

-- FUNCTION : Conv_fn_RemoveNoiseCharacters
-- VERSION : 1
-- DESCRIPTION:     This function accepts a CaseId and a Separator and returns all
--           Inventors in one text string, seperated by the Seperator

-- Date          Who Number Version             Description
-- ====         === ====== =======             ===========
-- 7 Mar 2018   CGS            1            Function created
as
Begin
	DECLARE @i int
	DECLARE @sString varchar(100)
	declare @nLength int

	SET @i = (SELECT PATINDEX('%[^a-z^0-9 ]%', @psName))
	set @sString = @psName
	set @nLength = 1

	WHILE (@i > 0)

	BEGIN

		  SET @sString = (SELECT REPLACE(@sString, SUBSTRING(@sString, @i, @nLength), ''))
		  SET @i = (SELECT PATINDEX('%[^a-z^0-9 ]%', @sString))

	END

	if PATINDEX('% CO Ltd', @sString) > 0
		begin 
			SET @i = (SELECT PATINDEX('% CO Ltd', @sString))
			set @nLength = 7
		end
	else
	if PATINDEX('% AB', @sString) > 0
		begin 
			SET @i = (SELECT PATINDEX('% AB', @sString))
			set @nLength = 3
		end
	else
	if PATINDEX('% SC', @sString) > 0
		begin 
			SET @i = (SELECT PATINDEX('% SC', @sString))
			set @nLength = 3
		end
	else
	if PATINDEX('% AG', @sString) > 0
		begin 
			SET @i = (SELECT PATINDEX('% AG', @sString))
			set @nLength = 3
		end
	else
	if PATINDEX('% LTD%', @sString) > 0
		begin 
			SET @i = (SELECT PATINDEX('% LTD%', @sString))
			set @nLength = 4
		end
	else
	if PATINDEX('% LLC%', @sString) > 0
		begin 
			SET @i = (SELECT PATINDEX('% LLC%', @sString))
			set @nLength = 4
		end
	else
	if PATINDEX('% LLP%', @sString) > 0
		begin 
			SET @i = (SELECT PATINDEX('% LLP%', @sString))
			set @nLength = 4
		end
	else
	if PATINDEX('% Limited%', @sString) > 0
		begin 
			SET @i = (SELECT PATINDEX('% Limited%', @sString))
			set @nLength = 8
		end
	else
	if PATINDEX('% Office%', @sString) > 0
		begin 
			SET @i = (SELECT PATINDEX('% Office%', @sString))
			set @nLength = 7
		end
	else
	if	PATINDEX('% GMBH%', @sString) > 0 
		begin
			SET @i = (SELECT PATINDEX('% GMBH%', @sString))
			set @nLength = 5
		end
	else
	if	PATINDEX('% INC%', @sString) > 0 
		begin
			SET @i = (SELECT PATINDEX('% INC%', @sString))
			set @nLength = 4
		end
	else
	if	PATINDEX('% SRL%', @sString) > 0 
		begin
			SET @i = (SELECT PATINDEX('% SRL%', @sString))
			set @nLength = 4
		end
	else
	if	PATINDEX('% SPA', @sString) > 0 
		begin
			SET @i = (SELECT PATINDEX('% SPA', @sString))
			set @nLength = 4
		end
	
	if @nLength > 1
		SET @sString = (SELECT REPLACE(@sString, SUBSTRING(@sString, @i, @nLength), ''))			
	
	return @sString
end
go

if exists(SELECT	*
			FROM	INFORMATION_SCHEMA.ROUTINES
			where	ROUTINE_NAME = 'Conv_fn_RemoveNonNumericCharacters'
			and		ROUTINE_TYPE = 'FUNCTION')
	drop function Conv_fn_RemoveNonNumericCharacters
go

CREATE  FUNCTION [dbo].Conv_fn_RemoveNonNumericCharacters
       (
            @psName nvarchar(1000) -- character string between 2 goods
       )
Returns nvarchar(1000)

-- FUNCTION : Conv_fn_RemoveNonNumericCharacters
-- VERSION : 1
-- DESCRIPTION:    

-- Date          Who Number Version             Description
-- ====         === ====== =======             ===========
-- 7 Mar 2018   CGS            1            Function created
as
Begin
	DECLARE @i int
	DECLARE @sString varchar(100)
	declare @nLength int

	SET @i = (SELECT PATINDEX('%[^0-9 ]%', @psName))
	set @sString = @psName
	set @nLength = 1

	WHILE (@i > 0)

	BEGIN

		  SET @sString = (SELECT REPLACE(@sString, SUBSTRING(@sString, @i, @nLength), ''))
		  SET @i = (SELECT PATINDEX('%[^0-9 ]%', @sString))

	END
	
	if @nLength > 1
		SET @sString = (SELECT REPLACE(@sString, SUBSTRING(@sString, @i, @nLength), ''))			
	
	return @sString
end
go
*/

--DPH check whats not included in mapping doc from below

IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'CONV_CASETYPEMAP')
  DROP TABLE dbo.CONV_CASETYPEMAP
GO

create table CONV_CASETYPEMAP (
			BB_CASETYPE			nvarchar(50) not null,
			BB_CASETYPEDESC		nvarchar(50) not null,
			CASETYPE			nvarchar(50) null,	
			PROPERTYTYPE		nvarchar(50) null,
			SPECIALMAPPING		nvarchar(20) null,		
			NOTES				nvarchar(100) null
)

IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'CONV_CASECATMAP')
  DROP TABLE dbo.CONV_CASECATMAP
GO

create table CONV_CASECATMAP (
			BB_PROPERTYTYPE     nvarchar(50) not null,
			BB_IC_CODE			nvarchar(100) not null,
			BB_COUNTRY_CODE		nvarchar(100) null,
			CASECATEGORY		nvarchar(100) null,	
			SUBTYPE				nvarchar(20) null,
			SPECIALMAPPING		nvarchar(20) null,			
			NOTES			nvarchar(100) null
)

IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'CONV_SUBTYPEMAP')
  DROP TABLE dbo.CONV_SUBTYPEMAP
GO

create table CONV_SUBTYPEMAP (
			SY_SUBTYPE		nvarchar(100) null,	
			SUBTYPE			nvarchar(100) null,
			SPECIALMAPPING		nvarchar(20) null,		
			NOTES			nvarchar(100) null
)

IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'CONV_PROPERTYTYPEMAP')
  DROP TABLE dbo.CONV_PROPERTYTYPEMAP
GO

create table CONV_PROPERTYTYPEMAP (
			SY_PROPERTYTYPE			nvarchar(100) null,	
			PROPERTYTYPE			nvarchar(100) null,
			SPECIALMAPPING			nvarchar(20) null,		
			NOTES				nvarchar(100) null
)

IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Conv_STATUSMAP')
  DROP TABLE dbo.Conv_STATUSMAP
GO



create table Conv_STATUSMAP (
		SY_STATUSCODE				nvarchar(100) not null,
		STATUSCODE					nvarchar(50) null,
		SPECIALMAPPING				nvarchar(250) null,	
		NOTES						nvarchar(100) null
)


IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Conv_COUNTRYMAP')
  DROP TABLE dbo.Conv_COUNTRYMAP
GO

create table Conv_COUNTRYMAP (
		BB_COUNTRY_CODE			nvarchar(10) not null,
		BB_COUNTRYDESC			nvarchar(200) not null,
		COUNTRYCODE				nvarchar(3) null,
		COUNTRY					nvarchar(100) null,
		SPECIALMAPPING			nvarchar(20) null,	
		NOTES					nvarchar(100) null)
go

IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Conv_EVENTMAP_APPS_DN')
  DROP TABLE dbo.Conv_EVENTMAP_APPS_DN
GO

create table Conv_EVENTMAP_APPS_DN (
		BB_APPS_CASE_TYPE			nvarchar(1) null,
		BB_IC_CODE					nvarchar(8) null,
		BB_IC_NOS_DESC				nvarchar(15) null,
		EVENTNO						int null,
		SPECIALMAPPING				nvarchar(20) null,	
		NOTES						nvarchar(100) null)
go


IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Conv_EVENTMAP_DY_MAJ')
  DROP TABLE dbo.Conv_EVENTMAP_DY_MAJ
GO

create table Conv_EVENTMAP_DY_MAJ (
		BB_APPS_CASE_TYPE			nvarchar(1) null,
		BB_IC_CODE					nvarchar(8) null,
		BB_MAJ_TRK_ID				nvarchar(6) null,
		BB_COUNTRY_CODE				nvarchar(3) null,
		BB_EVENTDESC				nvarchar(150) null,
		EVENTNO						int null,
		SPECIALMAPPING				nvarchar(100) null,	
		NOTES						nvarchar(100) null)
go

IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Conv_EVENTMAP_DY_MAJ_NO_TRKID')
  DROP TABLE dbo.Conv_EVENTMAP_DY_MAJ_NO_TRKID
GO

create table Conv_EVENTMAP_DY_MAJ_NO_TRKID (
		BB_APPS_CASE_TYPE			nvarchar(1) null,
		BB_IC_CODE					nvarchar(8) null,
		BB_MAJ_TRK_ID				nvarchar(6) null,
		BB_COUNTRY_CODE				nvarchar(3) null,
		BB_EVENTDESC				nvarchar(150) null,
		EVENTNO						int null,
		SPECIALMAPPING				nvarchar(100) null,	
		NOTES						nvarchar(100) null)
go

IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Conv_EVENTMAP_NA_FORMALITIES')
  DROP TABLE dbo.Conv_EVENTMAP_NA_FORMALITIES
GO

create table Conv_EVENTMAP_NA_FORMALITIES (
		BB_APPS_CASE_TYPE			nvarchar(1) null,
		BB_IC_CODE					nvarchar(8) null,
		BB_MAJ_TRK_ID				nvarchar(6) null,
		BB_COUNTRY_CODE				nvarchar(3) null,
		BB_MAJ_TEXT3				nvarchar(150) null,
		EVENTNO						int null,
		SPECIALMAPPING				nvarchar(100) null,	
		NOTES						nvarchar(100) null)
go


--Conv_TEXTTYPEMAP
IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Conv_TEXTTYPEMAP')
  DROP TABLE dbo.Conv_TEXTTYPEMAP
GO

create table Conv_TEXTTYPEMAP (
		BB_APPS_NH_PAGE				nvarchar(10) not null,
		TEXTTYPE					nvarchar(2) null,
		TEXTTYPEDESC				nvarchar(50) null,
		SPECIALMAPPING				nvarchar(20) null,	
		NOTES						nvarchar(100) null)
go

--Conv_NUMBERTYPEMAP
IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Conv_NUMBERTYPEMAP')
  DROP TABLE dbo.Conv_NUMBERTYPEMAP
GO

create table Conv_NUMBERTYPEMAP (
		BB_CASETYPE				nvarchar(36) not null,
		BB_IC_NOS_DESC			nvarchar(100) not null,
		NUMBERTYPE				nvarchar(36) null,
		NUMBERTYPEDESC			nvarchar(100) null,
		SPECIALMAPPING			nvarchar(20) null,	
		NOTES					nvarchar(100) null)
go

IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Conv_CASERELATIONMAP')
  DROP TABLE dbo.Conv_CASERELATIONMAP
GO

create table Conv_CASERELATIONMAP (
		BB_APPS_RL_TYPE				nvarchar(10) not null,
		BB_IC_CODE					nvarchar(8) not null,
		BB_APPS_RL_CODE		        nvarchar(8)  null,
		--BB_COUNTRY_CODE				nvarchar(10) null,
		RELATIONSHIP				nvarchar(3) null,
		SPECIALMAPPING				nvarchar(20) null,	
		NOTES						nvarchar(200) null)
go

--IF EXISTS (SELECT 1 FROM sysindexes WHERE name = 'XIE_Conv_CASERELATIONMAP_CONV01_MAIN')
--  DROP INDEX Conv_CASERELATIONMAP.XIE_Conv_CASERELATIONMAP_CONV01_MAIN;
--GO

--CREATE INDEX XIE_Conv_CASERELATIONMAP_CONV01_MAIN
--  ON Conv_CASERELATIONMAP
--     (BB_APPS_RL_TYPE);
--GO


--Names mapping tables

IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Conv_NAMERELATIONMAP')
  DROP TABLE dbo.Conv_NAMERELATIONMAP
GO

create table Conv_NAMERELATIONMAP (
		SY_RELATIONSHIP			nvarchar(3) not null,
		SY_RELATIONDESCR			nvarchar(30) not null,
		SY_REVERSEDESCR			nvarchar(30) not null,
		RELATIONSHIP				nvarchar(3) null,
		RELATIONDESCR				nvarchar(30) null,
		REVERSEDESCR				nvarchar(30) null,	
		SPECIALMAPPING				nvarchar(20) null,	
		NOTES						nvarchar(100) null)
go

IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Conv_CASENAMEMAP')
  DROP TABLE dbo.Conv_CASENAMEMAP
GO

create table Conv_CASENAMEMAP (
		ROLETYPEID			nvarchar(10) not null, 
		ROLETYPENAME		nvarchar(50) null,
		SPECIALMAPPING		nvarchar(20) null,	
		NAMETYPE			nvarchar(10) null, 
		NAMETYPEDESC		nvarchar(50) null,
   primary key (roletypeid)     
)
go

IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Conv_CONTACTNAMES')
  DROP TABLE dbo.Conv_CONTACTNAMES
GO

create table Conv_CONTACTNAMES (
		NameNo				int not null,
		ENTITY_ID			int not null, 
		NAME_ID				int not null, 
		CONTACT_NAME		nvarchar(1000) not null
)
go

--IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'CONV_NAMEMAPPINGTABLE')
--  DROP TABLE dbo.CONV_NAMEMAPPINGTABLE
--GO

--create table CONV_NAMEMAPPINGTABLE (
--		ENTITYID			int not null,
--		NAMEID				int not null, 
--		NAMENO				int not null,
--		ATTENTIONAME		smallint null,
--		AGAINSTNAME			smallint null,
--		AGAINSTCASES		smallint null
--)
--go

IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'CONV_NAMEMAPPING')
  DROP TABLE dbo.CONV_NAMEMAPPING
GO

create table CONV_NAMEMAPPING (
		SY_NAMECODE		nvarchar(20) not null, 
		SY_NAME			nvarchar(254) not null,
		NAMECODE			nvarchar(20) not null
)
go



IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Conv_TelecomTable')
  DROP TABLE dbo.Conv_TelecomTable
GO

Create table Conv_TelecomTable
	(TeleCode		int identity(1,-1) not null,
	NameNo			int not null,
	OPID			int  null,
	PPID			int  null,
	TeleType		nvarchar(10) not null,
	TeleDetails		nvarchar(200) not null,
	ISMAIN			smallint null,

   primary key (nameno, telecode, teletype)     
	)
go


IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[Conv_fnParseList]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
	DROP FUNCTION [dbo].[Conv_fnParseList]
GO

CREATE FUNCTION dbo.Conv_fnParseList
(
	@Delimiter CHAR,
	@Text nvarchar(max),
	@NameId		int
)
RETURNS @Result TABLE (RowID SMALLINT IDENTITY(1, 1) PRIMARY KEY, Data VARCHAR(8000), NameId int)
AS

BEGIN
	DECLARE	@NextPos INT,
		@LastPos INT

	SELECT	@NextPos = CHARINDEX(@Delimiter, @Text, 1),
		@LastPos = 0

	WHILE @NextPos > 0
		BEGIN
			INSERT	@Result
				(
					Data,
					NameId
				)
			SELECT	SUBSTRING(@Text, @LastPos + 1, @NextPos - @LastPos - 1), @NameId

			SELECT	@LastPos = @NextPos,
				@NextPos = CHARINDEX(@Delimiter, @Text, @NextPos + 1)
		END

	IF @NextPos <= @LastPos
		INSERT	@Result
			(
				Data,
				NameId
			)
		SELECT	SUBSTRING(@Text, @LastPos + 1, DATALENGTH(@Text) - @LastPos), @NameId

	RETURN
END
go

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fn_StripEmailAddress]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
	DROP FUNCTION [dbo].[fn_StripEmailAddress]
GO

CREATE FUNCTION [dbo].[fn_StripEmailAddress](@sEmailAddress nvarchar(max))
RETURNS varchar(max)

AS
-- Function :	fn_StripEmailAddress
-- VERSION :	1
-- COPYRIGHT:	Copyright CPA Software Solutions (Australia) Pty Limited
-- DESCRIPTION:	Strips out the non ASCII character and returns the remaining text.
--				It also removes any spaces, char(32)
-- MODIFICATIONS :
-- Date		Who	Change	Version	Description
-- -----------	-------	------	-------	----------------------------------------------- 
-- 12 Sep 2014	MF		1	Function created
-- 09 Mar 2020 CGS		2	Created from fn_StripNonASCII and now removing spaces
BEGIN

    DECLARE @sResult	varchar(max)
    DECLARE @sChar	nvarchar(1)
    DECLARE @nPosition	int
    
    SET @sResult = ''

    SET @nPosition = 1
    
    WHILE @nPosition <= LEN(@sEmailAddress)
    BEGIN
        SET @sChar = SUBSTRING(@sEmailAddress, @nPosition, 1)
        --Unicode & ASCII are the same from 1 to 255.
        --Only Unicode goes beyond 255
        --0 to 31 are non-printable characters
		--We also need to remove spaces which is 32
        IF UNICODE(@sChar) between 33 and 255
            SET @sResult = @sResult + @sChar
        SET @nPosition = @nPosition + 1
    END

    RETURN @sResult

END
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fn_StripNonASCII]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
	DROP FUNCTION [dbo].[fn_StripNonASCII]
GO


CREATE FUNCTION [dbo].[fn_StripNonASCII](@sStringWithASCII nvarchar(max))
RETURNS varchar(max)

AS
-- Function :	fn_StripNonASCII
-- VERSION :	1
-- COPYRIGHT:	Copyright CPA Software Solutions (Australia) Pty Limited
-- DESCRIPTION:	Strips out the non ASCII character and returns the remaining text.
-- MODIFICATIONS :
-- Date		Who	Change	Version	Description
-- -----------	-------	------	-------	----------------------------------------------- 
-- 12 Sep 2014	MF		1	Function created
BEGIN

    DECLARE @sResult	varchar(max)
    DECLARE @sChar	nvarchar(1)
    DECLARE @nPosition	int
    
    SET @sResult = ''

    SET @nPosition = 1
    
    WHILE @nPosition <= LEN(@sStringWithASCII)
    BEGIN
        SET @sChar = SUBSTRING(@sStringWithASCII, @nPosition, 1)
        --Unicode & ASCII are the same from 1 to 255.
        --Only Unicode goes beyond 255
        --0 to 31 are non-printable characters
        IF UNICODE(@sChar) between 32 and 255
            SET @sResult = @sResult + @sChar
        SET @nPosition = @nPosition + 1
    END

    RETURN @sResult

END
GO

IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Conv_ADDRESS' AND TABLE_TYPE = N'BASE TABLE')
  DROP TABLE [dbo].[Conv_ADDRESS]
GO

CREATE TABLE [dbo].[Conv_ADDRESS] (
	ADDRESSCODE			int identity(-1,-1) not null,
	BB_ADDRESSCODE		int not null, --GD_CST_CODE
	STREET1				nvarchar(254) NULL,
	STREET2				nvarchar(254) NULL,
	CITY				nvarchar(30) NULL,
	STATE				nvarchar(20) NULL,
	POSTCODE			nvarchar(10) NULL,
	COUNTRYCODE			nvarchar(3) NOT NULL, 
)
GO

IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Conv_TELECOM' AND TABLE_TYPE = N'BASE TABLE')
  DROP TABLE [dbo].Conv_TELECOM
GO

CREATE TABLE [dbo].Conv_TELECOM (
	TELECODE			int identity(-1,-1) not null,
	TELECOMTYPE			int null,
	TELECOMNUMBER		nvarchar(100) null,
	NAMENO				int not null,

)
GO

--select * from TELECOMMUNICATION
--select * from LASTINTERNALCODE


IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Conv_NAME' AND TABLE_TYPE = N'BASE TABLE')
  DROP TABLE [dbo].[Conv_NAME]
GO

CREATE TABLE [dbo].[Conv_NAME] (
	NAMENO				int identity(-1,-1) not null,
	NA_REFERENCE		nvarchar(6)  null,
	NAMECODE			nvarchar(20) NULL,
	ENTITYTYPE			nvarchar(1) NULL, -- 'O' Organisation, 'I' Individual
	CLIENTINDICATOR		nvarchar(1) NULL, -- 'Y' for a client, 'N' otherwise
	STAFFINDICATOR		nvarchar(1) NULL, -- 'Y' for a person employed by the installation client, 'N' otherwise
	NAME				nvarchar(254) NULL,
	FIRSTNAME           nvarchar(50) NULL,
	TITLE               nvarchar(20) NULL,
	INITIALS            nvarchar(10) NULL,
	NATIONALITY			nvarchar(3) null,
	CASUALSALUTATION    nvarchar  (40) NULL,
	FORMALSALUTATION    nvarchar  (40) NULL,
	ADDRESSCODE			int null,
	SUPPLIERFLAG		decimal(1,0) null,
	AGENTFLAG			decimal(1,0) null,
	USEDASFLAG			smallint null,
	SORTKEY1            nvarchar(20) NULL,
	SORTKEY2            nvarchar(20) NULL,
	REMARKS				nvarchar(254) null,
	EMAIL				nvarchar(500) null --actually 100 but need to spit
)
GO

IF EXISTS (SELECT 1 FROM sysindexes WHERE name = 'XIE_Conv_NAME_CONV01_MAIN')
  DROP INDEX Conv_NAME.XIE_Conv_NAME_CONV01_MAIN;
GO

CREATE CLUSTERED INDEX XIE_Conv_NAME_CONV01_MAIN
  ON Conv_NAME
     (NA_REFERENCE);
GO

--IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Conv_NAME' AND TABLE_TYPE = N'BASE TABLE')
--  DROP TABLE [dbo].[Conv_NAME]
--GO

--CREATE TABLE [dbo].[Conv_NAME] (
--	 NAMENO					int identity(-1,-1) not null,
--	 OPID					nvarchar  (10) NULL,
--	 PPID					int null,
-- 	  [NAMECODE]           nvarchar  (10) NULL,
--	 [ENTITYTYPE]         nvarchar   (1) NULL, -- 'O' Organisation, 'I' Individual
-- 	 [CLIENTINDICATOR]    nvarchar   (1) NULL, -- 'Y' for a client, 'N' otherwise
--	 [STAFFINDICATOR]     nvarchar   (1) NULL, -- 'Y' for a person employed by the installation client, 'N' otherwise
--	 [NAME]               nvarchar (254) NULL,
--	 [FIRSTNAME]          nvarchar  (50) NULL,
--	 [TITLE]              nvarchar  (20) NULL,
--	 [INITIALS]           nvarchar  (10) NULL,
--	 [CASUALSALUTATION]   nvarchar  (40) NULL,
--	 [FORMALSALUTATION]   nvarchar  (40) NULL,
--	 [SORTKEY1]           nvarchar  (20) NULL,
--	 [SORTKEY2]           nvarchar  (20) NULL,
--	 [CORRADDRESSLINE1]   nvarchar (254) NULL,
--	 [CORRADDRESSLINE2]   nvarchar (254) NULL,
--	 [CORRADDRESSLINE3]   nvarchar  (50) NULL,
--	 [CORRADDRESSLINE4]   nvarchar  (50) NULL,
--	 [CORRADDRESSLINE5]   nvarchar  (54) NULL,
--	 [CORRCITY]           nvarchar  (30) NULL,
--	 [CORRSTATE]          nvarchar  (40) NULL,
--	 [CORRPOSTCODE]       nvarchar  (10) NULL,
--	 [CORRCOUNTRYCODE]    nvarchar   (3) NULL, -- into IMPORTNAMEWITHNO.CORRCOUNTRYCODE; map using Conv_Map_Country
---- Amended 26/5/20
--	 [STREETADDRESSLINE1] nvarchar (254) NULL,
--	 [STREETADDRESSLINE2] nvarchar  (50) NULL,
--	 [STREETADDRESSLINE3] nvarchar  (50) NULL,
--	 [STREETADDRESSLINE4] nvarchar  (50) NULL,
--	 [STREETADDRESSLINE5] nvarchar  (54) NULL,
--	 [STREETCITY]         nvarchar  (30) NULL,
--	 [STREETSTATE]        nvarchar  (40) NULL,
--	 [STREETPOSTCODE]     nvarchar  (10) NULL,
--	 [STREETCOUNTRYCODE]  nvarchar   (3) NULL, -- into IMPORTNAMEWITHNO.STREETCOUNTRYCODE; map using Conv_Map_Country
--	 [MAINPHONECOUNTRY]   nvarchar   (5) NULL, -- Dialling Code; into IMPORTNAMEWITHNO.MAINPHONECOUNTRY; into TELECOMMUNICATION.ISD
--	 [MAINPHONEAREA]      nvarchar   (5) NULL,
--	 [MAINPHONENUMBER]    nvarchar  (50) NULL,
--	 [MAINFAXCOUNTRY]     nvarchar   (5) NULL, -- Dialling Code; into IMPORTNAMEWITHNO.MAINFAXCOUNTRY; into TELECOMMUNICATION.ISD
--	 [MAINFAXAREA]        nvarchar   (5) NULL,
--	 [MAINFAXNUMBER]      nvarchar  (50) NULL,
--	 [MOBILEPHONE]        nvarchar  (50) NULL,
--	 [TELEX]              nvarchar (100) NULL,
--	 [EMAIL]              nvarchar (100) NULL,
--	 [HOMEPHONE]          nvarchar  (50) NULL,
--	 [HOMEFAX]            nvarchar  (50) NULL,
--	 [WEBSITE]            nvarchar (100) NULL,
--	 [REGISTRATIONNO]     nvarchar  (30) NULL,
--  [VATNO]              nvarchar  (30) NULL, -- into IMPORTNAMEWITHNO.VATNO; into ORGANISATION.VATNO
--	 [REMARKS]            nvarchar (254) NULL,
--  [STATECODE]          nvarchar   (3) NULL,
--  [CURRENCY]           nvarchar   (3) NULL,
--  [INCORPORATEDIN]     nvarchar (254) NULL,
--  [SHORTNAME]          nvarchar  (10) NULL,
--  [POSITIONTITLE]      nvarchar  (50) NULL,
--  [JOBTYPE]            nvarchar  (80) NULL, -- into IMPORTNAMEWITHNO.JOBTYPE; into EMPLOYEE.STAFFCLASS
--  [EXTENSION]          nvarchar  (10) NULL,
--  [HIREDATE]           datetime       NULL,
--  [EXTENDEDNAME]       nvarchar  (50) NULL,
--  [XMASCARD]           nvarchar   (1) NULL,
--  [NEWSLETTER]         nvarchar   (1) NULL,
--  [GENDER]             nvarchar   (1) NULL,
--  [OFFICE]             nvarchar  (80) NULL, -- into IMPORTNAMEWITHNO.OFFICE
--  [DATEENTERED]        datetime       NULL,
--  [DATECHANGED]        datetime       NULL,
--  [DATECEASED]         datetime       NULL,
--  [SUPPLIERINDICATOR]  nvarchar   (1) NULL,
--  [AGENTINDICATOR]     nvarchar   (1) NULL,
---- Added 23/5/20
--	 [HOMEADDRESSLINE1]   nvarchar (254) NULL,
--	 [HOMEADDRESSLINE2]   nvarchar (254) NULL,
--	 [HOMEADDRESSLINE3]   nvarchar  (50) NULL,
--	 [HOMEADDRESSLINE4]   nvarchar  (50) NULL,
--	 [HOMEADDRESSLINE5]   nvarchar  (54) NULL,
--	 [HOMECITY]           nvarchar  (30) NULL,
--	 [HOMESTATE]          nvarchar  (40) NULL,
--	 [HOMEPOSTCODE]       nvarchar  (10) NULL,
--	 [HOMECOUNTRYCODE]    nvarchar   (3) NULL,
--	 [HOMEEMAIL]          nvarchar (100) NULL,
--	 [PHONE]              nvarchar  (50) NULL
--)
--GO


if exists (select * from INFORMATION_SCHEMA.TABLES where TABLE_NAME = 'Conv_MappingCases')
	drop table Conv_MappingCases
go



create table  Conv_MappingCases (
			CASEID				int identity(1,-1) not null,
			BB_CASE_REF			varchar(20) not null,
			IRN				nvarchar (150) not null,
			STEM				nvarchar(50) null,
			FAMILY				nvarchar(20) null,
			CASETYPE			nvarchar (1) not null,
			PROPERTYTYPE			nvarchar(100) not null,
			CASECATEGORY			nvarchar(100) null,
			SUBTYPE				nvarchar(100) null,
			COUNTRYCODE			nvarchar(100) null,
			BASIS				nvarchar(10) null,
			CASESTATUS			int null,
			RENEWALSTATUS			int null,
			TITLE				nvarchar(max) null,
			APPNO				nvarchar(100) null,
			FILINGDATE			datetime null,
			REGNO				nvarchar(100) null,
			GRANTDATE			datetime null,
			PUBNO				nvarchar(100) null,
			PUBDATE				datetime null,
			ALLOWANCEDATE			datetime null,
			EARLIESTPRIORITYDATE		datetime null,
			CONFIRMATIONNO			nvarchar(100) null,
			PCTAPPNO			nvarchar(100) null,
			ENTITYSIZE			int null,
			LOCALCLASSES			nvarchar(254) null,
			INTCLASSES			nvarchar(254) null,
			TYPEOFMARK			smallint,
			OFFICEID			int null,
			LIVEFLAG			nvarchar(1) null,
			PURCHASEORDERNO		nvarchar(80) null
		primary key (CASEID)
			)
go

IF EXISTS (SELECT 1 FROM sysindexes WHERE name = 'XIE_Conv_MappingCases_CONV01_MAIN')
  DROP INDEX Conv_MappingCases.XIE_Conv_MappingCases_CONV01_MAIN;
GO

CREATE INDEX XIE_Conv_MappingCases_CONV01_MAIN
  ON Conv_MappingCases
     (BB_CASE_REF);
GO

IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Conv_NAMETYPEMAP')
  DROP TABLE dbo.Conv_NAMETYPEMAP
GO

create table Conv_NAMETYPEMAP (
		BB_NAMETYPE				nvarchar(8) not null,
		NAMETYPE				nvarchar(3) null,
		--NAMETYPEDESC			nvarchar(50) null,
		SPECIALMAPPING			nvarchar(20) null,	
		NOTES					nvarchar(100) null)
go


IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Conv_EVENTTEXTMAP' AND TABLE_TYPE = N'BASE TABLE')
  DROP TABLE [dbo].Conv_EVENTTEXTMAP
GO

CREATE TABLE [dbo].Conv_EVENTTEXTMAP (
	EVENTTEXTID			int identity(-1,-1) not null,
	--BB_EVENTTEXTID		int not null,
	EVENTTEXT			nvarchar(max),
	CASEID				int,
	EVENTNO				int,
	cycle				smallint
)
GO

--if object_id('Conv_TitleMapSafe') is not null
--   drop function Conv_TitleMapSafe;
--GO
--create function Conv_TitleMapSafe()
--   returns table as
--return
--   select 
--      NamePrefix, 
--      Title
--   from
--      ( values 
--         ('Monsieur', 'Monsieur'),
--         ('Mr.', 'Mr.'),
--         ('De heer', 'De heer'),
--         ('Madame', 'Madame'),
--         ('Mrs.', 'Mrs'),
--         ('Mevrouw', 'Mevrouw'),
--         ('Mr', 'Mr'),
--         ('Ms.', 'Ms'),
--         ('Mrs', 'Mrs'),
--         ('Ms', 'Ms'),
--         ('Mme', 'Mme'),
--         ('Maître', 'Maître'),
--         ('Dr.', 'Dr.'),
--         ('Sir', 'Sir'),
--         ('Dhr.', 'Dhr.'),
--         ('Meester', 'Meester'),
--         ('Miss', 'Miss'),
--         ('Docteur', 'Docteur'),
--         ('Mevr.', 'Mevr.'),
--         ('Meneer', 'Meneer'),
--         ('Mme.', 'Mme'),
--         ('Dr', 'Dr'),
--         ('Mlle', 'Mlle'),
--         ('Prof.', 'Prof.'),
--         ('Mister', 'Mister'),
--         ('Dipl.-Ing.', 'Dipl.-Ing.'),
--         ('Herr', 'Herr'),
--         ('Prof. Dr.', 'Prof. Dr.'),
--         ('Mevouw', 'Mevrouw'),
--         ('Dear Mr.', 'Mr.'),
--         ('Merouw', 'Mevrouw'),
--         ('Monisuer', 'Monsieur'),
--         ('Dipl.Ing.', 'Dipl. ing.'),
--         ('MS;', 'Ms'),
--         ('Mrs,', 'Mrs'),
--         ('Mervouw', 'Mevrouw'),
--         ('Dhr', 'Dhr.'),
--         ('Ing.', 'Ing.'),
--         ('Madame.', 'Madame'),
--         ('Monseur', 'Monsieur'),
--         ('Mr,', 'Mr.'),
--         ('Ms,', 'Ms'),
--         ('Me.', 'Maître'),
--         ('Sr.', 'Sir'),
--         ('Legal - Meester', 'Meester'),
--         ('Mevr. en Dhr.', 'Mevr. en Dhr.')
--      ) as Titles(NamePrefix, Title)
--GO

--IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'CONV_DocketMap')
--  DROP TABLE dbo.CONV_DocketMap
--GO

--create table CONV_DocketMap
--	 (ACTIVITYCODE			nvarchar(100) null, 
--	 TASKCODE				nvarchar(100) null,
--	 TASKDESCRIPTION  		nvarchar(100) null,
--	 EVENTNO				int null,
--	 EVENTDESC				nvarchar(100) null, 
--	 SPECIALMAPPING			nvarchar(100) null,
--	 COMMENT 				nvarchar(100) null)
--go

--IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'CONV_ProcessMap')
--  DROP TABLE dbo.CONV_ProcessMap
--GO

--create table CONV_ProcessMap
--	 (TASKCODE				nvarchar(100) null,
--	 TASKDESCRIPTION  		nvarchar(100) null,
--	 EVENTNO				int null,
--	 EVENTDESC				nvarchar(100) null, 
--	 SPECIALMAPPING			nvarchar(100) null)
--go

--CONVERTED DATES

IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Conv_CONVERTEDEVENTS' AND TABLE_TYPE = N'BASE TABLE')
  DROP TABLE [dbo].Conv_CONVERTEDEVENTS
GO

CREATE TABLE [dbo].Conv_CONVERTEDEVENTS (
	EVENTNO			int identity(1,1) not null,
	SY_EVENTNO		int not null
)
GO

--STANDING INSTRUCTIONS

IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Conv_INSTRUCTIONSMAP' AND TABLE_TYPE = N'BASE TABLE')
  DROP TABLE [dbo].Conv_INSTRUCTIONSMAP
GO

CREATE TABLE [dbo].Conv_INSTRUCTIONSMAP (
	SY_INSTRUCTIONCODE			smallint not null,
	SY_INSTRUCTIONTYPE			nvarchar(3) not null,
	SY_DESCRIPTION				nvarchar(50) not null,
	INSTRUCTIONCODE				smallint not null,
	INSTRUCTIONTYPE				nvarchar(3) not null,
	DESCRIPTION					nvarchar(50) not null
)
GO

IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Conv_TABLECODESMAP')
  DROP TABLE dbo.Conv_TABLECODESMAP
GO

create table Conv_TABLECODESMAP (
		SY_TABLECODE			int not null,
		SY_TABLETYPE			smallint not null,
		SY_DESCRIPTION			nvarchar(80) not null,
		TABLECODE				int not null,
		TABLETYPE				smallint not null,
		DESCRIPTION				nvarchar(80) not null,
		SPECIALMAPPING			nvarchar(20) null,	
		NOTES					nvarchar(100) null)
go




--CHECKLISTS

IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Conv_QUESTIONMAP')
  DROP TABLE dbo.Conv_QUESTIONMAP
GO

create table Conv_QUESTIONMAP (
		SY_QUESTIONNO				smallint not null,
		QUESTIONNO				smallint not null,
		SPECIALMAPPING				nvarchar(20) null,	
		NOTES					nvarchar(100) null)
go

--IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Conv_CHECKLISTMAP')
--  DROP TABLE dbo.Conv_CHECKLISTMAP
--GO

--create table Conv_CHECKLISTMAP (
--		SY_CHECKLISTTYPE		smallint not null,
--		CHECKLISTTYPE			smallint not null,
--		SPECIALMAPPING			nvarchar(20) null,	
--		NOTES					nvarchar(100) null)
--go

IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Conv_NAMEFAMILYMAP' AND TABLE_TYPE = N'BASE TABLE')
  DROP TABLE [dbo].Conv_NAMEFAMILYMAP
GO

CREATE TABLE [dbo].Conv_NAMEFAMILYMAP (
	SY_FAMILYNO		smallint not null,
	SY_FAMILYTITLE		nvarchar(50) null,
	FAMILYNO		smallint not null,
	FAMILYTITLE		nvarchar(50) null,
	SPECIALMAPPING		nvarchar(20) null,	
	NOTES			nvarchar(100) null	
)
GO

IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Conv_TAXRATESMAP' AND TABLE_TYPE = N'BASE TABLE')
  DROP TABLE [dbo].Conv_TAXRATESMAP
GO

CREATE TABLE [dbo].Conv_TAXRATESMAP (
	SY_TAXCODE		nvarchar(3) not null,
	SY_DESCRIPTION		nvarchar(30) null,
	TAXCODE			nvarchar(3) not null,
	DESCRIPTION		nvarchar(30) null,
	SPECIALMAPPING		nvarchar(20) null,	
	NOTES			nvarchar(100) null	
)
GO

IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Conv_DEBTORSTATUSMAP' AND TABLE_TYPE = N'BASE TABLE')
  DROP TABLE [dbo].Conv_DEBTORSTATUSMAP
GO

CREATE TABLE [dbo].Conv_DEBTORSTATUSMAP (
	SY_BADDEBTOR		smallint not null,
	SY_DEBTORSTATUS		nvarchar(50) null,
	BADDEBTOR		smallint not null,
	DEBTORSTATUS		nvarchar(50) null,
	SPECIALMAPPING		nvarchar(20) null,	
	NOTES			nvarchar(100) null	
)
GO

IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Conv_PROFITCENTREMAP' AND TABLE_TYPE = N'BASE TABLE')
  DROP TABLE [dbo].Conv_PROFITCENTREMAP
GO

CREATE TABLE [dbo].Conv_PROFITCENTREMAP (
	SY_PROFITCENTRECODE	nvarchar(6) not null,
	SY_ENTITYNO		int not null,
	SY_DESCRIPTION		nvarchar(50) null,
	PROFITCENTRECODE	nvarchar(6) not null,	
	ENTITYNO		int not null,
	DESCRIPTION		nvarchar(50) null,
	SPECIALMAPPING		nvarchar(20) null,	
	NOTES			nvarchar(100) null	
)
GO

IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Conv_COUNTRYFLAGSMAP' AND TABLE_TYPE = N'BASE TABLE')
  DROP TABLE [dbo].Conv_COUNTRYFLAGSMAP
GO

CREATE TABLE [dbo].Conv_COUNTRYFLAGSMAP (
	SY_COUNTRYCODE		nvarchar(3) not null,
	SY_FLAGNUMBER		int not null,
	SY_FLAGNAME		nvarchar(30) null,
	COUNTRYCODE		nvarchar(3) not null,	
	FLAGNUMBER		int not null,
	FLAGNAME		nvarchar(30) null,
	SPECIALMAPPING		nvarchar(20) null,	
	NOTES			nvarchar(100) null	
)
GO

IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Conv_WIPCODEMAP' AND TABLE_TYPE = N'BASE TABLE')
  DROP TABLE [dbo].Conv_WIPCODEMAP
GO

CREATE TABLE [dbo].Conv_WIPCODEMAP (
	SY_WIPCODE		nvarchar(6) not null,
	SY_DESCRIPTION		nvarchar(30) null,
	WIPCODE			nvarchar(6) not null,
	DESCRIPTION		nvarchar(30) null,
	SPECIALMAPPING		nvarchar(20) null,	
	NOTES			nvarchar(100) null	
)
GO



IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Conv_IMAGES' AND TABLE_TYPE = N'BASE TABLE')
  DROP TABLE [dbo].Conv_IMAGES
GO

CREATE TABLE [dbo].Conv_IMAGES (
	IMAGEID			int identity(-1,-1) not null,
	APPS_USER_REF	varchar(20)  null,
	CASE_REF		varchar(20)  null,
	PATH			nvarchar(254) null,
	UNC				nvarchar(254) null,
	FILENAME		nvarchar(100) null
)
GO
